{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ddd34ed9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:05.069976Z",
     "iopub.status.busy": "2024-08-10T20:10:05.069466Z",
     "iopub.status.idle": "2024-08-10T20:10:06.087852Z",
     "shell.execute_reply": "2024-08-10T20:10:06.086310Z"
    },
    "papermill": {
     "duration": 1.034514,
     "end_time": "2024-08-10T20:10:06.090854",
     "exception": false,
     "start_time": "2024-08-10T20:10:05.056340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e8/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e8/train.csv\n",
      "/kaggle/input/playground-series-s4e8/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ebba763",
   "metadata": {
    "papermill": {
     "duration": 0.012107,
     "end_time": "2024-08-10T20:10:06.114714",
     "exception": false,
     "start_time": "2024-08-10T20:10:06.102607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***modules***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1b4f857",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:06.141186Z",
     "iopub.status.busy": "2024-08-10T20:10:06.140617Z",
     "iopub.status.idle": "2024-08-10T20:10:08.175322Z",
     "shell.execute_reply": "2024-08-10T20:10:08.173937Z"
    },
    "papermill": {
     "duration": 2.05194,
     "end_time": "2024-08-10T20:10:08.178348",
     "exception": false,
     "start_time": "2024-08-10T20:10:06.126408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
    "from sklearn.metrics import matthews_corrcoef\n",
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f06e328c",
   "metadata": {
    "papermill": {
     "duration": 0.01106,
     "end_time": "2024-08-10T20:10:08.200863",
     "exception": false,
     "start_time": "2024-08-10T20:10:08.189803",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***loading datasets***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff12b0c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:08.225635Z",
     "iopub.status.busy": "2024-08-10T20:10:08.225201Z",
     "iopub.status.idle": "2024-08-10T20:10:28.940073Z",
     "shell.execute_reply": "2024-08-10T20:10:28.938489Z"
    },
    "papermill": {
     "duration": 20.730557,
     "end_time": "2024-08-10T20:10:28.943094",
     "exception": false,
     "start_time": "2024-08-10T20:10:08.212537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "subs = pd.read_csv('/kaggle/input/playground-series-s4e8/sample_submission.csv')\n",
    "df1 = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\n",
    "df2 = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fed023d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:28.967202Z",
     "iopub.status.busy": "2024-08-10T20:10:28.966753Z",
     "iopub.status.idle": "2024-08-10T20:10:28.989926Z",
     "shell.execute_reply": "2024-08-10T20:10:28.988415Z"
    },
    "papermill": {
     "duration": 0.038591,
     "end_time": "2024-08-10T20:10:28.992677",
     "exception": false,
     "start_time": "2024-08-10T20:10:28.954086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3116945</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3116946</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3116947</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3116948</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3116949</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id class\n",
       "0  3116945     e\n",
       "1  3116946     e\n",
       "2  3116947     e\n",
       "3  3116948     e\n",
       "4  3116949     e"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subs.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fb16a723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:29.016623Z",
     "iopub.status.busy": "2024-08-10T20:10:29.016207Z",
     "iopub.status.idle": "2024-08-10T20:10:29.048981Z",
     "shell.execute_reply": "2024-08-10T20:10:29.047851Z"
    },
    "papermill": {
     "duration": 0.047868,
     "end_time": "2024-08-10T20:10:29.051683",
     "exception": false,
     "start_time": "2024-08-10T20:10:29.003815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>class</th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stem-root</th>\n",
       "      <th>stem-surface</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>e</td>\n",
       "      <td>8.80</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "      <td>f</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>w</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>w</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>p</td>\n",
       "      <td>4.51</td>\n",
       "      <td>x</td>\n",
       "      <td>h</td>\n",
       "      <td>o</td>\n",
       "      <td>f</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>y</td>\n",
       "      <td>o</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>t</td>\n",
       "      <td>z</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>6.94</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>b</td>\n",
       "      <td>f</td>\n",
       "      <td>x</td>\n",
       "      <td>c</td>\n",
       "      <td>w</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>s</td>\n",
       "      <td>n</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>l</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>e</td>\n",
       "      <td>3.88</td>\n",
       "      <td>f</td>\n",
       "      <td>y</td>\n",
       "      <td>g</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>NaN</td>\n",
       "      <td>g</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>w</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id class  cap-diameter cap-shape cap-surface cap-color  \\\n",
       "0   0     e          8.80         f           s         u   \n",
       "1   1     p          4.51         x           h         o   \n",
       "2   2     e          6.94         f           s         b   \n",
       "3   3     e          3.88         f           y         g   \n",
       "\n",
       "  does-bruise-or-bleed gill-attachment gill-spacing gill-color  ...  \\\n",
       "0                    f               a            c          w  ...   \n",
       "1                    f               a            c          n  ...   \n",
       "2                    f               x            c          w  ...   \n",
       "3                    f               s          NaN          g  ...   \n",
       "\n",
       "   stem-root  stem-surface stem-color veil-type veil-color has-ring ring-type  \\\n",
       "0        NaN           NaN          w       NaN        NaN        f         f   \n",
       "1        NaN             y          o       NaN        NaN        t         z   \n",
       "2        NaN             s          n       NaN        NaN        f         f   \n",
       "3        NaN           NaN          w       NaN        NaN        f         f   \n",
       "\n",
       "  spore-print-color habitat season  \n",
       "0               NaN       d      a  \n",
       "1               NaN       d      w  \n",
       "2               NaN       l      w  \n",
       "3               NaN       d      u  \n",
       "\n",
       "[4 rows x 22 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "07ded59c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:29.077957Z",
     "iopub.status.busy": "2024-08-10T20:10:29.077546Z",
     "iopub.status.idle": "2024-08-10T20:10:29.101228Z",
     "shell.execute_reply": "2024-08-10T20:10:29.100014Z"
    },
    "papermill": {
     "duration": 0.038942,
     "end_time": "2024-08-10T20:10:29.103653",
     "exception": false,
     "start_time": "2024-08-10T20:10:29.064711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>stem-height</th>\n",
       "      <th>...</th>\n",
       "      <th>stem-root</th>\n",
       "      <th>stem-surface</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2077962</th>\n",
       "      <td>5194907</td>\n",
       "      <td>5.03</td>\n",
       "      <td>b</td>\n",
       "      <td>g</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>a</td>\n",
       "      <td>d</td>\n",
       "      <td>g</td>\n",
       "      <td>6.00</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>s</td>\n",
       "      <td>g</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2077963</th>\n",
       "      <td>5194908</td>\n",
       "      <td>15.51</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>w</td>\n",
       "      <td>f</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>y</td>\n",
       "      <td>2.69</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>w</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  cap-diameter cap-shape cap-surface cap-color  \\\n",
       "2077962  5194907          5.03         b           g         n   \n",
       "2077963  5194908         15.51         f         NaN         w   \n",
       "\n",
       "        does-bruise-or-bleed gill-attachment gill-spacing gill-color  \\\n",
       "2077962                    f               a            d          g   \n",
       "2077963                    f               d            c          y   \n",
       "\n",
       "         stem-height  ...  stem-root stem-surface stem-color veil-type  \\\n",
       "2077962         6.00  ...        NaN            s          g       NaN   \n",
       "2077963         2.69  ...        NaN          NaN          w       NaN   \n",
       "\n",
       "        veil-color has-ring ring-type spore-print-color habitat season  \n",
       "2077962        NaN        f         f               NaN       d      a  \n",
       "2077963        NaN        f         f               NaN       d      w  \n",
       "\n",
       "[2 rows x 21 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.tail(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c207a39",
   "metadata": {
    "papermill": {
     "duration": 0.012137,
     "end_time": "2024-08-10T20:10:29.127518",
     "exception": false,
     "start_time": "2024-08-10T20:10:29.115381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***status check***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "415bf654",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:29.153288Z",
     "iopub.status.busy": "2024-08-10T20:10:29.152564Z",
     "iopub.status.idle": "2024-08-10T20:10:47.624823Z",
     "shell.execute_reply": "2024-08-10T20:10:47.623374Z"
    },
    "papermill": {
     "duration": 18.488499,
     "end_time": "2024-08-10T20:10:47.627731",
     "exception": false,
     "start_time": "2024-08-10T20:10:29.139232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate: False\n",
      "Null: True\n",
      "Missing_value: 15868508\n",
      "Types:\n",
      "id                        int64\n",
      "class                    object\n",
      "cap-diameter            float64\n",
      "cap-shape                object\n",
      "cap-surface              object\n",
      "cap-color                object\n",
      "does-bruise-or-bleed     object\n",
      "gill-attachment          object\n",
      "gill-spacing             object\n",
      "gill-color               object\n",
      "stem-height             float64\n",
      "stem-width              float64\n",
      "stem-root                object\n",
      "stem-surface             object\n",
      "stem-color               object\n",
      "veil-type                object\n",
      "veil-color               object\n",
      "has-ring                 object\n",
      "ring-type                object\n",
      "spore-print-color        object\n",
      "habitat                  object\n",
      "season                   object\n",
      "dtype: object\n",
      "Shape: (3116945, 22)\n"
     ]
    }
   ],
   "source": [
    "class summary:\n",
    "    def __init__(self, x):\n",
    "        self.x = x\n",
    "    def data_set(self):\n",
    "        #checks for duplicate\n",
    "        duplicate = self.x.duplicated().any()\n",
    "        #drop duplicates \n",
    "        if duplicate == True:\n",
    "            self.x.drop_duplicates(inplace=True)\n",
    "            self.x.reset_index(drop=True)\n",
    "        #checks for empty values\n",
    "        null = self.x.isna().sum().any()\n",
    "        #missing values\n",
    "        total_missing = self.x.isnull().sum().sum()\n",
    "        #data types\n",
    "        data_type = self.x.dtypes\n",
    "        #shape\n",
    "        shapes = self.x.shape\n",
    "        return f\"Duplicate: {duplicate}\\nNull: {null}\\nMissing_value: {total_missing}\\nTypes:\\n{data_type}\\nShape: {shapes}\"\n",
    "    \n",
    "print(summary(df1).data_set())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c14bf289",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:47.654262Z",
     "iopub.status.busy": "2024-08-10T20:10:47.653150Z",
     "iopub.status.idle": "2024-08-10T20:10:59.312553Z",
     "shell.execute_reply": "2024-08-10T20:10:59.311088Z"
    },
    "papermill": {
     "duration": 11.67566,
     "end_time": "2024-08-10T20:10:59.315632",
     "exception": false,
     "start_time": "2024-08-10T20:10:47.639972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate: False\n",
      "Null: True\n",
      "Missing_value: 10579477\n",
      "Types:\n",
      "id                        int64\n",
      "cap-diameter            float64\n",
      "cap-shape                object\n",
      "cap-surface              object\n",
      "cap-color                object\n",
      "does-bruise-or-bleed     object\n",
      "gill-attachment          object\n",
      "gill-spacing             object\n",
      "gill-color               object\n",
      "stem-height             float64\n",
      "stem-width              float64\n",
      "stem-root                object\n",
      "stem-surface             object\n",
      "stem-color               object\n",
      "veil-type                object\n",
      "veil-color               object\n",
      "has-ring                 object\n",
      "ring-type                object\n",
      "spore-print-color        object\n",
      "habitat                  object\n",
      "season                   object\n",
      "dtype: object\n",
      "Shape: (2077964, 21)\n"
     ]
    }
   ],
   "source": [
    "print(summary(df2).data_set())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4f3185a",
   "metadata": {
    "papermill": {
     "duration": 0.012446,
     "end_time": "2024-08-10T20:10:59.340899",
     "exception": false,
     "start_time": "2024-08-10T20:10:59.328453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> too much missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bbfd9f3",
   "metadata": {
    "papermill": {
     "duration": 0.01189,
     "end_time": "2024-08-10T20:10:59.364774",
     "exception": false,
     "start_time": "2024-08-10T20:10:59.352884",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***exploratory analysis and data cleaning***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "96334cfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:10:59.391083Z",
     "iopub.status.busy": "2024-08-10T20:10:59.390018Z",
     "iopub.status.idle": "2024-08-10T20:11:00.238987Z",
     "shell.execute_reply": "2024-08-10T20:11:00.236851Z"
    },
    "papermill": {
     "duration": 0.870042,
     "end_time": "2024-08-10T20:11:00.246717",
     "exception": false,
     "start_time": "2024-08-10T20:10:59.376675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def pie_chat(data):\n",
    "    plt.pie(data.value_counts(),\n",
    "            labels=data.unique(),\n",
    "            autopct='%.2f%%',\n",
    "            shadow=True,\n",
    "            pctdistance=0.5,\n",
    "            explode=[0.01, 0.1])\n",
    "    plt.show()\n",
    "pie_chat(df1['class'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0a9f8a5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:00.297618Z",
     "iopub.status.busy": "2024-08-10T20:11:00.297215Z",
     "iopub.status.idle": "2024-08-10T20:11:05.271622Z",
     "shell.execute_reply": "2024-08-10T20:11:05.270378Z"
    },
    "papermill": {
     "duration": 4.999298,
     "end_time": "2024-08-10T20:11:05.274417",
     "exception": false,
     "start_time": "2024-08-10T20:11:00.275119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cap-diameter': 4,\n",
       " 'cap-shape': 40,\n",
       " 'cap-surface': 671023,\n",
       " 'cap-color': 12,\n",
       " 'does-bruise-or-bleed': 8,\n",
       " 'gill-attachment': 523936,\n",
       " 'gill-spacing': 1258435,\n",
       " 'gill-color': 57,\n",
       " 'stem-root': 2757023,\n",
       " 'stem-surface': 1980861,\n",
       " 'stem-color': 38,\n",
       " 'veil-type': 2957493,\n",
       " 'veil-color': 2740947,\n",
       " 'has-ring': 24,\n",
       " 'ring-type': 128880,\n",
       " 'spore-print-color': 2849682,\n",
       " 'habitat': 45}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#this function returns colummns with null values\n",
    "def columns_with_missing_values(df1):\n",
    "    missing = df1.isnull().sum()\n",
    "    missing_cols = missing[missing > 0]\n",
    "    return missing_cols.to_dict()\n",
    "\n",
    "columns_with_missing_values(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51274242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:05.302117Z",
     "iopub.status.busy": "2024-08-10T20:11:05.301655Z",
     "iopub.status.idle": "2024-08-10T20:11:08.399610Z",
     "shell.execute_reply": "2024-08-10T20:11:08.398088Z"
    },
    "papermill": {
     "duration": 3.115622,
     "end_time": "2024-08-10T20:11:08.402879",
     "exception": false,
     "start_time": "2024-08-10T20:11:05.287257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cap-diameter': 7,\n",
       " 'cap-shape': 31,\n",
       " 'cap-surface': 446904,\n",
       " 'cap-color': 13,\n",
       " 'does-bruise-or-bleed': 10,\n",
       " 'gill-attachment': 349821,\n",
       " 'gill-spacing': 839595,\n",
       " 'gill-color': 49,\n",
       " 'stem-height': 1,\n",
       " 'stem-root': 1838012,\n",
       " 'stem-surface': 1321488,\n",
       " 'stem-color': 21,\n",
       " 'veil-type': 1971545,\n",
       " 'veil-color': 1826124,\n",
       " 'has-ring': 19,\n",
       " 'ring-type': 86195,\n",
       " 'spore-print-color': 1899617,\n",
       " 'habitat': 25}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_with_missing_values(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7f277586",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:08.432028Z",
     "iopub.status.busy": "2024-08-10T20:11:08.430743Z",
     "iopub.status.idle": "2024-08-10T20:11:13.761242Z",
     "shell.execute_reply": "2024-08-10T20:11:13.759894Z"
    },
    "papermill": {
     "duration": 5.347527,
     "end_time": "2024-08-10T20:11:13.763972",
     "exception": false,
     "start_time": "2024-08-10T20:11:08.416445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>class</th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>stem-height</th>\n",
       "      <th>stem-width</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>e</td>\n",
       "      <td>8.80</td>\n",
       "      <td>f</td>\n",
       "      <td>u</td>\n",
       "      <td>f</td>\n",
       "      <td>w</td>\n",
       "      <td>4.51</td>\n",
       "      <td>15.39</td>\n",
       "      <td>w</td>\n",
       "      <td>f</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>p</td>\n",
       "      <td>4.51</td>\n",
       "      <td>x</td>\n",
       "      <td>o</td>\n",
       "      <td>f</td>\n",
       "      <td>n</td>\n",
       "      <td>4.79</td>\n",
       "      <td>6.48</td>\n",
       "      <td>o</td>\n",
       "      <td>t</td>\n",
       "      <td>d</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>6.94</td>\n",
       "      <td>f</td>\n",
       "      <td>b</td>\n",
       "      <td>f</td>\n",
       "      <td>w</td>\n",
       "      <td>6.85</td>\n",
       "      <td>9.93</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>l</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id class  cap-diameter cap-shape cap-color does-bruise-or-bleed gill-color  \\\n",
       "0   0     e          8.80         f         u                    f          w   \n",
       "1   1     p          4.51         x         o                    f          n   \n",
       "2   2     e          6.94         f         b                    f          w   \n",
       "\n",
       "   stem-height  stem-width stem-color has-ring habitat season  \n",
       "0         4.51       15.39          w        f       d      a  \n",
       "1         4.79        6.48          o        t       d      w  \n",
       "2         6.85        9.93          n        f       l      w  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dropping columns with missing values greater than 100\n",
    "def drop_columns_(df1):\n",
    "    missing = df1.isnull().sum()\n",
    "    missing_cols = missing[missing > 100].index\n",
    "    df1.drop(missing_cols, axis=1, inplace=True)\n",
    "    return df1.head(3)\n",
    "\n",
    "drop_columns_(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "157af3ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:13.792607Z",
     "iopub.status.busy": "2024-08-10T20:11:13.791600Z",
     "iopub.status.idle": "2024-08-10T20:11:17.043950Z",
     "shell.execute_reply": "2024-08-10T20:11:17.042617Z"
    },
    "papermill": {
     "duration": 3.269475,
     "end_time": "2024-08-10T20:11:17.046731",
     "exception": false,
     "start_time": "2024-08-10T20:11:13.777256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>stem-height</th>\n",
       "      <th>stem-width</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3116945</td>\n",
       "      <td>8.64</td>\n",
       "      <td>x</td>\n",
       "      <td>n</td>\n",
       "      <td>t</td>\n",
       "      <td>w</td>\n",
       "      <td>11.13</td>\n",
       "      <td>17.12</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3116946</td>\n",
       "      <td>6.90</td>\n",
       "      <td>o</td>\n",
       "      <td>o</td>\n",
       "      <td>f</td>\n",
       "      <td>y</td>\n",
       "      <td>1.27</td>\n",
       "      <td>10.75</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3116947</td>\n",
       "      <td>2.00</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>n</td>\n",
       "      <td>6.18</td>\n",
       "      <td>3.14</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>d</td>\n",
       "      <td>s</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  cap-diameter cap-shape cap-color does-bruise-or-bleed gill-color  \\\n",
       "0  3116945          8.64         x         n                    t          w   \n",
       "1  3116946          6.90         o         o                    f          y   \n",
       "2  3116947          2.00         b         n                    f          n   \n",
       "\n",
       "   stem-height  stem-width stem-color has-ring habitat season  \n",
       "0        11.13       17.12          w        t       d      a  \n",
       "1         1.27       10.75          n        f       d      a  \n",
       "2         6.18        3.14          n        f       d      s  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drop_columns_(df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "471a0e96",
   "metadata": {
    "papermill": {
     "duration": 0.014485,
     "end_time": "2024-08-10T20:11:17.074683",
     "exception": false,
     "start_time": "2024-08-10T20:11:17.060198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***splitting ,encoding, scalling***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "62ca3759",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:17.104218Z",
     "iopub.status.busy": "2024-08-10T20:11:17.103785Z",
     "iopub.status.idle": "2024-08-10T20:11:17.421516Z",
     "shell.execute_reply": "2024-08-10T20:11:17.420369Z"
    },
    "papermill": {
     "duration": 0.336356,
     "end_time": "2024-08-10T20:11:17.424386",
     "exception": false,
     "start_time": "2024-08-10T20:11:17.088030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#training features\n",
    "features = df1.drop(['id', 'class'], axis=1)\n",
    "#target \n",
    "label = df1.pop('class')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c28f74f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:17.453188Z",
     "iopub.status.busy": "2024-08-10T20:11:17.452742Z",
     "iopub.status.idle": "2024-08-10T20:11:24.086613Z",
     "shell.execute_reply": "2024-08-10T20:11:24.085414Z"
    },
    "papermill": {
     "duration": 6.651406,
     "end_time": "2024-08-10T20:11:24.089260",
     "exception": false,
     "start_time": "2024-08-10T20:11:17.437854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>stem-height</th>\n",
       "      <th>stem-width</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.80</td>\n",
       "      <td>53</td>\n",
       "      <td>72</td>\n",
       "      <td>8</td>\n",
       "      <td>59</td>\n",
       "      <td>4.51</td>\n",
       "      <td>15.39</td>\n",
       "      <td>55</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.51</td>\n",
       "      <td>71</td>\n",
       "      <td>64</td>\n",
       "      <td>8</td>\n",
       "      <td>46</td>\n",
       "      <td>4.79</td>\n",
       "      <td>6.48</td>\n",
       "      <td>47</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.94</td>\n",
       "      <td>53</td>\n",
       "      <td>49</td>\n",
       "      <td>8</td>\n",
       "      <td>59</td>\n",
       "      <td>6.85</td>\n",
       "      <td>9.93</td>\n",
       "      <td>46</td>\n",
       "      <td>5</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cap-diameter  cap-shape  cap-color  does-bruise-or-bleed  gill-color  \\\n",
       "0          8.80         53         72                     8          59   \n",
       "1          4.51         71         64                     8          46   \n",
       "2          6.94         53         49                     8          59   \n",
       "\n",
       "   stem-height  stem-width  stem-color  has-ring  habitat  season  \n",
       "0         4.51       15.39          55         5       25       0  \n",
       "1         4.79        6.48          47        18       25       3  \n",
       "2         6.85        9.93          46         5       36       3  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#this function uses the label encoder to encode the training features \n",
    "lab_enc = LabelEncoder()\n",
    "def encoder(data):\n",
    "    #encoding\n",
    "    for col in data.columns:\n",
    "        if (data[col].dtype == 'object'):\n",
    "            data[col] = lab_enc.fit_transform(data[col])\n",
    "    return data.head(3)\n",
    "encoder(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9bb1033c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:24.120315Z",
     "iopub.status.busy": "2024-08-10T20:11:24.119855Z",
     "iopub.status.idle": "2024-08-10T20:11:24.257343Z",
     "shell.execute_reply": "2024-08-10T20:11:24.256023Z"
    },
    "papermill": {
     "duration": 0.155512,
     "end_time": "2024-08-10T20:11:24.260359",
     "exception": false,
     "start_time": "2024-08-10T20:11:24.104847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#filling null values in features\n",
    "features.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3b1a276f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:24.289697Z",
     "iopub.status.busy": "2024-08-10T20:11:24.289244Z",
     "iopub.status.idle": "2024-08-10T20:11:24.779718Z",
     "shell.execute_reply": "2024-08-10T20:11:24.778514Z"
    },
    "papermill": {
     "duration": 0.508374,
     "end_time": "2024-08-10T20:11:24.782497",
     "exception": false,
     "start_time": "2024-08-10T20:11:24.274123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.109086</td>\n",
       "      <td>0.716216</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.936508</td>\n",
       "      <td>0.050834</td>\n",
       "      <td>0.149563</td>\n",
       "      <td>0.932203</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.480769</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.055907</td>\n",
       "      <td>0.959459</td>\n",
       "      <td>0.820513</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.730159</td>\n",
       "      <td>0.053990</td>\n",
       "      <td>0.062974</td>\n",
       "      <td>0.796610</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.480769</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0  0.109086  0.716216  0.923077  0.307692  0.936508  0.050834  0.149563   \n",
       "1  0.055907  0.959459  0.820513  0.307692  0.730159  0.053990  0.062974   \n",
       "\n",
       "         7         8         9    10  \n",
       "0  0.932203  0.217391  0.480769  0.0  \n",
       "1  0.796610  0.782609  0.480769  1.0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#scalling\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "X = pd.DataFrame(scaler.fit_transform(features))\n",
    "X.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e7c496bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:24.812785Z",
     "iopub.status.busy": "2024-08-10T20:11:24.812295Z",
     "iopub.status.idle": "2024-08-10T20:11:29.971443Z",
     "shell.execute_reply": "2024-08-10T20:11:29.970137Z"
    },
    "papermill": {
     "duration": 5.177504,
     "end_time": "2024-08-10T20:11:29.974293",
     "exception": false,
     "start_time": "2024-08-10T20:11:24.796789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.014234</td>\n",
       "      <td>0.951613</td>\n",
       "      <td>0.771930</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.194275</td>\n",
       "      <td>0.166359</td>\n",
       "      <td>0.927273</td>\n",
       "      <td>0.73913</td>\n",
       "      <td>0.410256</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.011367</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.227273</td>\n",
       "      <td>0.964286</td>\n",
       "      <td>0.022168</td>\n",
       "      <td>0.104460</td>\n",
       "      <td>0.690909</td>\n",
       "      <td>0.26087</td>\n",
       "      <td>0.410256</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0  0.014234  0.951613  0.771930  0.818182  0.928571  0.194275  0.166359   \n",
       "1  0.011367  0.806452  0.789474  0.227273  0.964286  0.022168  0.104460   \n",
       "\n",
       "         7        8         9    10  \n",
       "0  0.927273  0.73913  0.410256  0.0  \n",
       "1  0.690909  0.26087  0.410256  0.0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#doing same steps on df2\n",
    "#features\n",
    "test_features = df2.drop('id', axis=1)\n",
    "#encoding \n",
    "encoder(test_features)\n",
    "#filling null values\n",
    "test_features.fillna(0, inplace=True)\n",
    "#scalling\n",
    "X_test = pd.DataFrame(scaler.fit_transform(test_features))\n",
    "X_test.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dd56e99e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:30.004720Z",
     "iopub.status.busy": "2024-08-10T20:11:30.004295Z",
     "iopub.status.idle": "2024-08-10T20:11:30.904272Z",
     "shell.execute_reply": "2024-08-10T20:11:30.902857Z"
    },
    "papermill": {
     "duration": 0.919427,
     "end_time": "2024-08-10T20:11:30.907983",
     "exception": false,
     "start_time": "2024-08-10T20:11:29.988556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, ..., 1, 0, 1])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#encoding the target\n",
    "y = lab_enc.fit_transform(label)\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "da16876e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:30.948053Z",
     "iopub.status.busy": "2024-08-10T20:11:30.947596Z",
     "iopub.status.idle": "2024-08-10T20:11:31.662831Z",
     "shell.execute_reply": "2024-08-10T20:11:31.661548Z"
    },
    "papermill": {
     "duration": 0.739475,
     "end_time": "2024-08-10T20:11:31.665555",
     "exception": false,
     "start_time": "2024-08-10T20:11:30.926080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2181861, 11]\n",
      "[935084, 11]\n",
      "[2181861]\n",
      "[935084]\n"
     ]
    }
   ],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=100)\n",
    "# Check shapes\n",
    "for i in (X_train, X_val, y_train, y_val):\n",
    "    print(list(i.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e517fd53",
   "metadata": {
    "papermill": {
     "duration": 0.014341,
     "end_time": "2024-08-10T20:11:31.694451",
     "exception": false,
     "start_time": "2024-08-10T20:11:31.680110",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***model and matthews metrics***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "366c1178",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:31.725900Z",
     "iopub.status.busy": "2024-08-10T20:11:31.725476Z",
     "iopub.status.idle": "2024-08-10T20:11:31.731674Z",
     "shell.execute_reply": "2024-08-10T20:11:31.730471Z"
    },
    "papermill": {
     "duration": 0.024447,
     "end_time": "2024-08-10T20:11:31.734167",
     "exception": false,
     "start_time": "2024-08-10T20:11:31.709720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#defining the metrics function\n",
    "def mcc_(y_pred, dmatrix):\n",
    "    y_true = dmatrix.get_label()\n",
    "    y_pred = (y_pred > 0.5).astype(int) \n",
    "    mcc = matthews_corrcoef(y_true, y_pred)\n",
    "    return 'mcc', mcc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "eb17a375",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:11:31.766330Z",
     "iopub.status.busy": "2024-08-10T20:11:31.765121Z",
     "iopub.status.idle": "2024-08-10T20:19:08.999347Z",
     "shell.execute_reply": "2024-08-10T20:19:08.997880Z"
    },
    "papermill": {
     "duration": 457.253422,
     "end_time": "2024-08-10T20:19:09.002219",
     "exception": false,
     "start_time": "2024-08-10T20:11:31.748797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-logloss:0.43091\tvalidation_0-mcc:0.77125\n",
      "[1]\tvalidation_0-logloss:0.30101\tvalidation_0-mcc:0.87531\n",
      "[2]\tvalidation_0-logloss:0.21176\tvalidation_0-mcc:0.92083\n",
      "[3]\tvalidation_0-logloss:0.17301\tvalidation_0-mcc:0.92909\n",
      "[4]\tvalidation_0-logloss:0.14113\tvalidation_0-mcc:0.94000\n",
      "[5]\tvalidation_0-logloss:0.12339\tvalidation_0-mcc:0.94249\n",
      "[6]\tvalidation_0-logloss:0.10470\tvalidation_0-mcc:0.94686\n",
      "[7]\tvalidation_0-logloss:0.09618\tvalidation_0-mcc:0.94912\n",
      "[8]\tvalidation_0-logloss:0.08864\tvalidation_0-mcc:0.95067\n",
      "[9]\tvalidation_0-logloss:0.08438\tvalidation_0-mcc:0.95210\n",
      "[10]\tvalidation_0-logloss:0.07963\tvalidation_0-mcc:0.95407\n",
      "[11]\tvalidation_0-logloss:0.07736\tvalidation_0-mcc:0.95494\n",
      "[12]\tvalidation_0-logloss:0.07587\tvalidation_0-mcc:0.95556\n",
      "[13]\tvalidation_0-logloss:0.07437\tvalidation_0-mcc:0.95621\n",
      "[14]\tvalidation_0-logloss:0.07327\tvalidation_0-mcc:0.95675\n",
      "[15]\tvalidation_0-logloss:0.07288\tvalidation_0-mcc:0.95695\n",
      "[16]\tvalidation_0-logloss:0.07250\tvalidation_0-mcc:0.95711\n",
      "[17]\tvalidation_0-logloss:0.07105\tvalidation_0-mcc:0.95785\n",
      "[18]\tvalidation_0-logloss:0.07073\tvalidation_0-mcc:0.95797\n",
      "[19]\tvalidation_0-logloss:0.06953\tvalidation_0-mcc:0.95867\n",
      "[20]\tvalidation_0-logloss:0.06875\tvalidation_0-mcc:0.95919\n",
      "[21]\tvalidation_0-logloss:0.06801\tvalidation_0-mcc:0.95956\n",
      "[22]\tvalidation_0-logloss:0.06784\tvalidation_0-mcc:0.95966\n",
      "[23]\tvalidation_0-logloss:0.06783\tvalidation_0-mcc:0.95964\n",
      "[24]\tvalidation_0-logloss:0.06777\tvalidation_0-mcc:0.95972\n",
      "[25]\tvalidation_0-logloss:0.06737\tvalidation_0-mcc:0.95977\n",
      "[26]\tvalidation_0-logloss:0.06720\tvalidation_0-mcc:0.95998\n",
      "[27]\tvalidation_0-logloss:0.06716\tvalidation_0-mcc:0.96006\n",
      "[28]\tvalidation_0-logloss:0.06707\tvalidation_0-mcc:0.96015\n",
      "[29]\tvalidation_0-logloss:0.06696\tvalidation_0-mcc:0.96015\n",
      "[30]\tvalidation_0-logloss:0.06695\tvalidation_0-mcc:0.96015\n",
      "[31]\tvalidation_0-logloss:0.06699\tvalidation_0-mcc:0.96012\n",
      "[32]\tvalidation_0-logloss:0.06700\tvalidation_0-mcc:0.96010\n",
      "[33]\tvalidation_0-logloss:0.06702\tvalidation_0-mcc:0.96008\n",
      "[34]\tvalidation_0-logloss:0.06701\tvalidation_0-mcc:0.96022\n",
      "[35]\tvalidation_0-logloss:0.06707\tvalidation_0-mcc:0.96021\n",
      "[36]\tvalidation_0-logloss:0.06701\tvalidation_0-mcc:0.96031\n",
      "[37]\tvalidation_0-logloss:0.06703\tvalidation_0-mcc:0.96018\n",
      "[38]\tvalidation_0-logloss:0.06704\tvalidation_0-mcc:0.96019\n",
      "[39]\tvalidation_0-logloss:0.06708\tvalidation_0-mcc:0.96021\n",
      "[40]\tvalidation_0-logloss:0.06704\tvalidation_0-mcc:0.96025\n",
      "[41]\tvalidation_0-logloss:0.06707\tvalidation_0-mcc:0.96025\n",
      "[42]\tvalidation_0-logloss:0.06706\tvalidation_0-mcc:0.96022\n",
      "[43]\tvalidation_0-logloss:0.06698\tvalidation_0-mcc:0.96032\n",
      "[44]\tvalidation_0-logloss:0.06703\tvalidation_0-mcc:0.96031\n",
      "[45]\tvalidation_0-logloss:0.06707\tvalidation_0-mcc:0.96029\n",
      "[46]\tvalidation_0-logloss:0.06712\tvalidation_0-mcc:0.96031\n",
      "[47]\tvalidation_0-logloss:0.06719\tvalidation_0-mcc:0.96027\n",
      "[48]\tvalidation_0-logloss:0.06723\tvalidation_0-mcc:0.96024\n",
      "[49]\tvalidation_0-logloss:0.06725\tvalidation_0-mcc:0.96024\n",
      "[50]\tvalidation_0-logloss:0.06727\tvalidation_0-mcc:0.96023\n",
      "[51]\tvalidation_0-logloss:0.06723\tvalidation_0-mcc:0.96029\n",
      "[52]\tvalidation_0-logloss:0.06721\tvalidation_0-mcc:0.96033\n",
      "[53]\tvalidation_0-logloss:0.06728\tvalidation_0-mcc:0.96028\n",
      "[54]\tvalidation_0-logloss:0.06730\tvalidation_0-mcc:0.96028\n",
      "[55]\tvalidation_0-logloss:0.06736\tvalidation_0-mcc:0.96020\n",
      "[56]\tvalidation_0-logloss:0.06726\tvalidation_0-mcc:0.96030\n",
      "[57]\tvalidation_0-logloss:0.06730\tvalidation_0-mcc:0.96031\n",
      "[58]\tvalidation_0-logloss:0.06730\tvalidation_0-mcc:0.96030\n",
      "[59]\tvalidation_0-logloss:0.06736\tvalidation_0-mcc:0.96033\n",
      "[60]\tvalidation_0-logloss:0.06739\tvalidation_0-mcc:0.96040\n",
      "[61]\tvalidation_0-logloss:0.06746\tvalidation_0-mcc:0.96037\n",
      "[62]\tvalidation_0-logloss:0.06749\tvalidation_0-mcc:0.96029\n",
      "[63]\tvalidation_0-logloss:0.06750\tvalidation_0-mcc:0.96030\n",
      "[64]\tvalidation_0-logloss:0.06753\tvalidation_0-mcc:0.96028\n",
      "[65]\tvalidation_0-logloss:0.06759\tvalidation_0-mcc:0.96022\n",
      "[66]\tvalidation_0-logloss:0.06762\tvalidation_0-mcc:0.96021\n",
      "[67]\tvalidation_0-logloss:0.06764\tvalidation_0-mcc:0.96020\n",
      "[68]\tvalidation_0-logloss:0.06760\tvalidation_0-mcc:0.96032\n",
      "[69]\tvalidation_0-logloss:0.06765\tvalidation_0-mcc:0.96031\n",
      "[70]\tvalidation_0-logloss:0.06767\tvalidation_0-mcc:0.96028\n",
      "[71]\tvalidation_0-logloss:0.06775\tvalidation_0-mcc:0.96033\n",
      "[72]\tvalidation_0-logloss:0.06781\tvalidation_0-mcc:0.96028\n",
      "[73]\tvalidation_0-logloss:0.06779\tvalidation_0-mcc:0.96027\n",
      "[74]\tvalidation_0-logloss:0.06780\tvalidation_0-mcc:0.96030\n",
      "[75]\tvalidation_0-logloss:0.06784\tvalidation_0-mcc:0.96027\n",
      "[76]\tvalidation_0-logloss:0.06788\tvalidation_0-mcc:0.96020\n",
      "[77]\tvalidation_0-logloss:0.06795\tvalidation_0-mcc:0.96021\n",
      "[78]\tvalidation_0-logloss:0.06803\tvalidation_0-mcc:0.96014\n",
      "[79]\tvalidation_0-logloss:0.06808\tvalidation_0-mcc:0.96005\n",
      "[80]\tvalidation_0-logloss:0.06813\tvalidation_0-mcc:0.96015\n",
      "[81]\tvalidation_0-logloss:0.06812\tvalidation_0-mcc:0.96020\n",
      "[82]\tvalidation_0-logloss:0.06819\tvalidation_0-mcc:0.96013\n",
      "[83]\tvalidation_0-logloss:0.06820\tvalidation_0-mcc:0.96017\n",
      "[84]\tvalidation_0-logloss:0.06824\tvalidation_0-mcc:0.96017\n",
      "[85]\tvalidation_0-logloss:0.06825\tvalidation_0-mcc:0.96017\n",
      "[86]\tvalidation_0-logloss:0.06828\tvalidation_0-mcc:0.96011\n",
      "[87]\tvalidation_0-logloss:0.06834\tvalidation_0-mcc:0.96006\n",
      "[88]\tvalidation_0-logloss:0.06834\tvalidation_0-mcc:0.96001\n",
      "[89]\tvalidation_0-logloss:0.06833\tvalidation_0-mcc:0.96007\n",
      "[90]\tvalidation_0-logloss:0.06836\tvalidation_0-mcc:0.96012\n",
      "[91]\tvalidation_0-logloss:0.06838\tvalidation_0-mcc:0.96014\n",
      "[92]\tvalidation_0-logloss:0.06841\tvalidation_0-mcc:0.96012\n",
      "[93]\tvalidation_0-logloss:0.06845\tvalidation_0-mcc:0.96010\n",
      "[94]\tvalidation_0-logloss:0.06854\tvalidation_0-mcc:0.96008\n",
      "[95]\tvalidation_0-logloss:0.06853\tvalidation_0-mcc:0.96010\n",
      "[96]\tvalidation_0-logloss:0.06860\tvalidation_0-mcc:0.96005\n",
      "[97]\tvalidation_0-logloss:0.06865\tvalidation_0-mcc:0.96001\n",
      "[98]\tvalidation_0-logloss:0.06869\tvalidation_0-mcc:0.96002\n",
      "[99]\tvalidation_0-logloss:0.06871\tvalidation_0-mcc:0.96005\n",
      "[100]\tvalidation_0-logloss:0.06874\tvalidation_0-mcc:0.96002\n",
      "[101]\tvalidation_0-logloss:0.06878\tvalidation_0-mcc:0.96003\n",
      "[102]\tvalidation_0-logloss:0.06889\tvalidation_0-mcc:0.95994\n",
      "[103]\tvalidation_0-logloss:0.06892\tvalidation_0-mcc:0.95997\n",
      "[104]\tvalidation_0-logloss:0.06895\tvalidation_0-mcc:0.95990\n",
      "[105]\tvalidation_0-logloss:0.06892\tvalidation_0-mcc:0.95996\n",
      "[106]\tvalidation_0-logloss:0.06895\tvalidation_0-mcc:0.95995\n",
      "[107]\tvalidation_0-logloss:0.06898\tvalidation_0-mcc:0.95993\n",
      "[108]\tvalidation_0-logloss:0.06901\tvalidation_0-mcc:0.95991\n",
      "[109]\tvalidation_0-logloss:0.06903\tvalidation_0-mcc:0.95989\n",
      "[110]\tvalidation_0-logloss:0.06904\tvalidation_0-mcc:0.95991\n",
      "[111]\tvalidation_0-logloss:0.06907\tvalidation_0-mcc:0.95995\n",
      "[112]\tvalidation_0-logloss:0.06909\tvalidation_0-mcc:0.95996\n",
      "[113]\tvalidation_0-logloss:0.06912\tvalidation_0-mcc:0.95998\n",
      "[114]\tvalidation_0-logloss:0.06915\tvalidation_0-mcc:0.95990\n",
      "[115]\tvalidation_0-logloss:0.06923\tvalidation_0-mcc:0.95983\n",
      "[116]\tvalidation_0-logloss:0.06924\tvalidation_0-mcc:0.95983\n",
      "[117]\tvalidation_0-logloss:0.06924\tvalidation_0-mcc:0.95987\n",
      "[118]\tvalidation_0-logloss:0.06927\tvalidation_0-mcc:0.95980\n",
      "[119]\tvalidation_0-logloss:0.06927\tvalidation_0-mcc:0.95976\n",
      "[120]\tvalidation_0-logloss:0.06930\tvalidation_0-mcc:0.95983\n",
      "[121]\tvalidation_0-logloss:0.06936\tvalidation_0-mcc:0.95983\n",
      "[122]\tvalidation_0-logloss:0.06935\tvalidation_0-mcc:0.95983\n",
      "[123]\tvalidation_0-logloss:0.06940\tvalidation_0-mcc:0.95978\n",
      "[124]\tvalidation_0-logloss:0.06940\tvalidation_0-mcc:0.95975\n",
      "[125]\tvalidation_0-logloss:0.06948\tvalidation_0-mcc:0.95970\n",
      "[126]\tvalidation_0-logloss:0.06948\tvalidation_0-mcc:0.95967\n",
      "[127]\tvalidation_0-logloss:0.06955\tvalidation_0-mcc:0.95976\n",
      "[128]\tvalidation_0-logloss:0.06959\tvalidation_0-mcc:0.95977\n",
      "[129]\tvalidation_0-logloss:0.06962\tvalidation_0-mcc:0.95973\n",
      "[130]\tvalidation_0-logloss:0.06963\tvalidation_0-mcc:0.95973\n",
      "[131]\tvalidation_0-logloss:0.06970\tvalidation_0-mcc:0.95974\n",
      "[132]\tvalidation_0-logloss:0.06976\tvalidation_0-mcc:0.95964\n",
      "[133]\tvalidation_0-logloss:0.06979\tvalidation_0-mcc:0.95966\n",
      "[134]\tvalidation_0-logloss:0.06983\tvalidation_0-mcc:0.95965\n",
      "[135]\tvalidation_0-logloss:0.06982\tvalidation_0-mcc:0.95964\n",
      "[136]\tvalidation_0-logloss:0.06986\tvalidation_0-mcc:0.95961\n",
      "[137]\tvalidation_0-logloss:0.06988\tvalidation_0-mcc:0.95964\n",
      "[138]\tvalidation_0-logloss:0.06991\tvalidation_0-mcc:0.95958\n",
      "[139]\tvalidation_0-logloss:0.06996\tvalidation_0-mcc:0.95955\n",
      "[140]\tvalidation_0-logloss:0.06997\tvalidation_0-mcc:0.95957\n",
      "[141]\tvalidation_0-logloss:0.06999\tvalidation_0-mcc:0.95961\n",
      "[142]\tvalidation_0-logloss:0.07005\tvalidation_0-mcc:0.95954\n",
      "[143]\tvalidation_0-logloss:0.07008\tvalidation_0-mcc:0.95952\n",
      "[144]\tvalidation_0-logloss:0.07011\tvalidation_0-mcc:0.95952\n",
      "[145]\tvalidation_0-logloss:0.07014\tvalidation_0-mcc:0.95952\n",
      "[146]\tvalidation_0-logloss:0.07018\tvalidation_0-mcc:0.95944\n",
      "[147]\tvalidation_0-logloss:0.07021\tvalidation_0-mcc:0.95943\n",
      "[148]\tvalidation_0-logloss:0.07024\tvalidation_0-mcc:0.95943\n",
      "[149]\tvalidation_0-logloss:0.07027\tvalidation_0-mcc:0.95947\n",
      "[150]\tvalidation_0-logloss:0.07029\tvalidation_0-mcc:0.95950\n",
      "[151]\tvalidation_0-logloss:0.07031\tvalidation_0-mcc:0.95953\n",
      "[152]\tvalidation_0-logloss:0.07035\tvalidation_0-mcc:0.95952\n",
      "[153]\tvalidation_0-logloss:0.07041\tvalidation_0-mcc:0.95949\n",
      "[154]\tvalidation_0-logloss:0.07042\tvalidation_0-mcc:0.95947\n",
      "[155]\tvalidation_0-logloss:0.07046\tvalidation_0-mcc:0.95948\n",
      "[156]\tvalidation_0-logloss:0.07044\tvalidation_0-mcc:0.95952\n",
      "[157]\tvalidation_0-logloss:0.07049\tvalidation_0-mcc:0.95948\n",
      "[158]\tvalidation_0-logloss:0.07052\tvalidation_0-mcc:0.95944\n",
      "[159]\tvalidation_0-logloss:0.07056\tvalidation_0-mcc:0.95948\n",
      "[160]\tvalidation_0-logloss:0.07064\tvalidation_0-mcc:0.95946\n",
      "[161]\tvalidation_0-logloss:0.07065\tvalidation_0-mcc:0.95939\n",
      "[162]\tvalidation_0-logloss:0.07071\tvalidation_0-mcc:0.95935\n",
      "[163]\tvalidation_0-logloss:0.07078\tvalidation_0-mcc:0.95942\n",
      "[164]\tvalidation_0-logloss:0.07078\tvalidation_0-mcc:0.95942\n",
      "[165]\tvalidation_0-logloss:0.07079\tvalidation_0-mcc:0.95946\n",
      "[166]\tvalidation_0-logloss:0.07084\tvalidation_0-mcc:0.95947\n",
      "[167]\tvalidation_0-logloss:0.07091\tvalidation_0-mcc:0.95945\n",
      "[168]\tvalidation_0-logloss:0.07095\tvalidation_0-mcc:0.95948\n",
      "[169]\tvalidation_0-logloss:0.07099\tvalidation_0-mcc:0.95945\n",
      "[170]\tvalidation_0-logloss:0.07097\tvalidation_0-mcc:0.95953\n",
      "[171]\tvalidation_0-logloss:0.07102\tvalidation_0-mcc:0.95946\n",
      "[172]\tvalidation_0-logloss:0.07107\tvalidation_0-mcc:0.95939\n",
      "[173]\tvalidation_0-logloss:0.07110\tvalidation_0-mcc:0.95940\n",
      "[174]\tvalidation_0-logloss:0.07116\tvalidation_0-mcc:0.95942\n",
      "[175]\tvalidation_0-logloss:0.07124\tvalidation_0-mcc:0.95940\n",
      "[176]\tvalidation_0-logloss:0.07128\tvalidation_0-mcc:0.95935\n",
      "[177]\tvalidation_0-logloss:0.07135\tvalidation_0-mcc:0.95934\n",
      "[178]\tvalidation_0-logloss:0.07136\tvalidation_0-mcc:0.95934\n",
      "[179]\tvalidation_0-logloss:0.07142\tvalidation_0-mcc:0.95938\n",
      "[180]\tvalidation_0-logloss:0.07146\tvalidation_0-mcc:0.95932\n",
      "[181]\tvalidation_0-logloss:0.07148\tvalidation_0-mcc:0.95933\n",
      "[182]\tvalidation_0-logloss:0.07150\tvalidation_0-mcc:0.95938\n",
      "[183]\tvalidation_0-logloss:0.07154\tvalidation_0-mcc:0.95934\n",
      "[184]\tvalidation_0-logloss:0.07157\tvalidation_0-mcc:0.95930\n",
      "[185]\tvalidation_0-logloss:0.07160\tvalidation_0-mcc:0.95932\n",
      "[186]\tvalidation_0-logloss:0.07162\tvalidation_0-mcc:0.95929\n",
      "[187]\tvalidation_0-logloss:0.07167\tvalidation_0-mcc:0.95925\n",
      "[188]\tvalidation_0-logloss:0.07171\tvalidation_0-mcc:0.95923\n",
      "[189]\tvalidation_0-logloss:0.07174\tvalidation_0-mcc:0.95918\n",
      "[190]\tvalidation_0-logloss:0.07177\tvalidation_0-mcc:0.95912\n",
      "[191]\tvalidation_0-logloss:0.07179\tvalidation_0-mcc:0.95912\n",
      "[192]\tvalidation_0-logloss:0.07182\tvalidation_0-mcc:0.95910\n",
      "[193]\tvalidation_0-logloss:0.07188\tvalidation_0-mcc:0.95904\n",
      "[194]\tvalidation_0-logloss:0.07199\tvalidation_0-mcc:0.95906\n",
      "[195]\tvalidation_0-logloss:0.07201\tvalidation_0-mcc:0.95908\n",
      "[196]\tvalidation_0-logloss:0.07205\tvalidation_0-mcc:0.95906\n",
      "[197]\tvalidation_0-logloss:0.07209\tvalidation_0-mcc:0.95915\n",
      "[198]\tvalidation_0-logloss:0.07214\tvalidation_0-mcc:0.95902\n",
      "[199]\tvalidation_0-logloss:0.07217\tvalidation_0-mcc:0.95895\n",
      "[200]\tvalidation_0-logloss:0.07221\tvalidation_0-mcc:0.95890\n",
      "[201]\tvalidation_0-logloss:0.07222\tvalidation_0-mcc:0.95892\n",
      "[202]\tvalidation_0-logloss:0.07225\tvalidation_0-mcc:0.95888\n",
      "[203]\tvalidation_0-logloss:0.07231\tvalidation_0-mcc:0.95892\n",
      "[204]\tvalidation_0-logloss:0.07236\tvalidation_0-mcc:0.95888\n",
      "[205]\tvalidation_0-logloss:0.07245\tvalidation_0-mcc:0.95890\n",
      "[206]\tvalidation_0-logloss:0.07245\tvalidation_0-mcc:0.95888\n",
      "[207]\tvalidation_0-logloss:0.07248\tvalidation_0-mcc:0.95885\n",
      "[208]\tvalidation_0-logloss:0.07252\tvalidation_0-mcc:0.95884\n",
      "[209]\tvalidation_0-logloss:0.07255\tvalidation_0-mcc:0.95884\n",
      "[210]\tvalidation_0-logloss:0.07262\tvalidation_0-mcc:0.95887\n",
      "[211]\tvalidation_0-logloss:0.07265\tvalidation_0-mcc:0.95880\n",
      "[212]\tvalidation_0-logloss:0.07268\tvalidation_0-mcc:0.95882\n",
      "[213]\tvalidation_0-logloss:0.07273\tvalidation_0-mcc:0.95874\n",
      "[214]\tvalidation_0-logloss:0.07275\tvalidation_0-mcc:0.95874\n",
      "[215]\tvalidation_0-logloss:0.07281\tvalidation_0-mcc:0.95874\n",
      "[216]\tvalidation_0-logloss:0.07285\tvalidation_0-mcc:0.95869\n",
      "[217]\tvalidation_0-logloss:0.07286\tvalidation_0-mcc:0.95870\n",
      "[218]\tvalidation_0-logloss:0.07289\tvalidation_0-mcc:0.95866\n",
      "[219]\tvalidation_0-logloss:0.07290\tvalidation_0-mcc:0.95867\n",
      "[220]\tvalidation_0-logloss:0.07294\tvalidation_0-mcc:0.95866\n",
      "[221]\tvalidation_0-logloss:0.07304\tvalidation_0-mcc:0.95860\n",
      "[222]\tvalidation_0-logloss:0.07307\tvalidation_0-mcc:0.95859\n",
      "[223]\tvalidation_0-logloss:0.07309\tvalidation_0-mcc:0.95860\n",
      "[224]\tvalidation_0-logloss:0.07315\tvalidation_0-mcc:0.95854\n",
      "[225]\tvalidation_0-logloss:0.07319\tvalidation_0-mcc:0.95857\n",
      "[226]\tvalidation_0-logloss:0.07321\tvalidation_0-mcc:0.95860\n",
      "[227]\tvalidation_0-logloss:0.07324\tvalidation_0-mcc:0.95853\n",
      "[228]\tvalidation_0-logloss:0.07325\tvalidation_0-mcc:0.95856\n",
      "[229]\tvalidation_0-logloss:0.07327\tvalidation_0-mcc:0.95854\n",
      "[230]\tvalidation_0-logloss:0.07331\tvalidation_0-mcc:0.95851\n",
      "[231]\tvalidation_0-logloss:0.07336\tvalidation_0-mcc:0.95846\n",
      "[232]\tvalidation_0-logloss:0.07335\tvalidation_0-mcc:0.95850\n",
      "[233]\tvalidation_0-logloss:0.07339\tvalidation_0-mcc:0.95854\n",
      "[234]\tvalidation_0-logloss:0.07343\tvalidation_0-mcc:0.95854\n",
      "[235]\tvalidation_0-logloss:0.07343\tvalidation_0-mcc:0.95853\n",
      "[236]\tvalidation_0-logloss:0.07342\tvalidation_0-mcc:0.95855\n",
      "[237]\tvalidation_0-logloss:0.07345\tvalidation_0-mcc:0.95854\n",
      "[238]\tvalidation_0-logloss:0.07347\tvalidation_0-mcc:0.95843\n",
      "[239]\tvalidation_0-logloss:0.07350\tvalidation_0-mcc:0.95848\n",
      "[240]\tvalidation_0-logloss:0.07357\tvalidation_0-mcc:0.95842\n",
      "[241]\tvalidation_0-logloss:0.07358\tvalidation_0-mcc:0.95838\n",
      "[242]\tvalidation_0-logloss:0.07365\tvalidation_0-mcc:0.95833\n",
      "[243]\tvalidation_0-logloss:0.07370\tvalidation_0-mcc:0.95835\n",
      "[244]\tvalidation_0-logloss:0.07370\tvalidation_0-mcc:0.95835\n",
      "[245]\tvalidation_0-logloss:0.07374\tvalidation_0-mcc:0.95838\n",
      "[246]\tvalidation_0-logloss:0.07377\tvalidation_0-mcc:0.95840\n",
      "[247]\tvalidation_0-logloss:0.07378\tvalidation_0-mcc:0.95837\n",
      "[248]\tvalidation_0-logloss:0.07381\tvalidation_0-mcc:0.95835\n",
      "[249]\tvalidation_0-logloss:0.07385\tvalidation_0-mcc:0.95843\n",
      "[250]\tvalidation_0-logloss:0.07388\tvalidation_0-mcc:0.95841\n",
      "[251]\tvalidation_0-logloss:0.07391\tvalidation_0-mcc:0.95843\n",
      "[252]\tvalidation_0-logloss:0.07396\tvalidation_0-mcc:0.95834\n",
      "[253]\tvalidation_0-logloss:0.07397\tvalidation_0-mcc:0.95835\n",
      "[254]\tvalidation_0-logloss:0.07399\tvalidation_0-mcc:0.95838\n",
      "[255]\tvalidation_0-logloss:0.07401\tvalidation_0-mcc:0.95839\n",
      "[256]\tvalidation_0-logloss:0.07404\tvalidation_0-mcc:0.95837\n",
      "[257]\tvalidation_0-logloss:0.07412\tvalidation_0-mcc:0.95835\n",
      "[258]\tvalidation_0-logloss:0.07413\tvalidation_0-mcc:0.95834\n",
      "[259]\tvalidation_0-logloss:0.07412\tvalidation_0-mcc:0.95837\n",
      "[260]\tvalidation_0-logloss:0.07415\tvalidation_0-mcc:0.95835\n",
      "[261]\tvalidation_0-logloss:0.07418\tvalidation_0-mcc:0.95835\n",
      "[262]\tvalidation_0-logloss:0.07422\tvalidation_0-mcc:0.95830\n",
      "[263]\tvalidation_0-logloss:0.07425\tvalidation_0-mcc:0.95828\n",
      "[264]\tvalidation_0-logloss:0.07428\tvalidation_0-mcc:0.95828\n",
      "[265]\tvalidation_0-logloss:0.07433\tvalidation_0-mcc:0.95824\n",
      "[266]\tvalidation_0-logloss:0.07437\tvalidation_0-mcc:0.95825\n",
      "[267]\tvalidation_0-logloss:0.07441\tvalidation_0-mcc:0.95821\n",
      "[268]\tvalidation_0-logloss:0.07445\tvalidation_0-mcc:0.95825\n",
      "[269]\tvalidation_0-logloss:0.07449\tvalidation_0-mcc:0.95820\n",
      "[270]\tvalidation_0-logloss:0.07451\tvalidation_0-mcc:0.95822\n",
      "[271]\tvalidation_0-logloss:0.07458\tvalidation_0-mcc:0.95818\n",
      "[272]\tvalidation_0-logloss:0.07461\tvalidation_0-mcc:0.95820\n",
      "[273]\tvalidation_0-logloss:0.07462\tvalidation_0-mcc:0.95817\n",
      "[274]\tvalidation_0-logloss:0.07464\tvalidation_0-mcc:0.95818\n",
      "[275]\tvalidation_0-logloss:0.07463\tvalidation_0-mcc:0.95822\n",
      "[276]\tvalidation_0-logloss:0.07464\tvalidation_0-mcc:0.95825\n",
      "[277]\tvalidation_0-logloss:0.07468\tvalidation_0-mcc:0.95825\n",
      "[278]\tvalidation_0-logloss:0.07472\tvalidation_0-mcc:0.95821\n",
      "[279]\tvalidation_0-logloss:0.07475\tvalidation_0-mcc:0.95823\n",
      "[280]\tvalidation_0-logloss:0.07477\tvalidation_0-mcc:0.95825\n",
      "[281]\tvalidation_0-logloss:0.07481\tvalidation_0-mcc:0.95816\n",
      "[282]\tvalidation_0-logloss:0.07484\tvalidation_0-mcc:0.95813\n",
      "[283]\tvalidation_0-logloss:0.07486\tvalidation_0-mcc:0.95813\n",
      "[284]\tvalidation_0-logloss:0.07489\tvalidation_0-mcc:0.95808\n",
      "[285]\tvalidation_0-logloss:0.07492\tvalidation_0-mcc:0.95810\n",
      "[286]\tvalidation_0-logloss:0.07495\tvalidation_0-mcc:0.95808\n",
      "[287]\tvalidation_0-logloss:0.07499\tvalidation_0-mcc:0.95809\n",
      "[288]\tvalidation_0-logloss:0.07504\tvalidation_0-mcc:0.95809\n",
      "[289]\tvalidation_0-logloss:0.07509\tvalidation_0-mcc:0.95810\n",
      "[290]\tvalidation_0-logloss:0.07510\tvalidation_0-mcc:0.95805\n",
      "[291]\tvalidation_0-logloss:0.07517\tvalidation_0-mcc:0.95807\n",
      "[292]\tvalidation_0-logloss:0.07519\tvalidation_0-mcc:0.95806\n",
      "[293]\tvalidation_0-logloss:0.07520\tvalidation_0-mcc:0.95810\n",
      "[294]\tvalidation_0-logloss:0.07520\tvalidation_0-mcc:0.95809\n",
      "[295]\tvalidation_0-logloss:0.07524\tvalidation_0-mcc:0.95805\n",
      "[296]\tvalidation_0-logloss:0.07527\tvalidation_0-mcc:0.95803\n",
      "[297]\tvalidation_0-logloss:0.07532\tvalidation_0-mcc:0.95802\n",
      "[298]\tvalidation_0-logloss:0.07535\tvalidation_0-mcc:0.95805\n",
      "[299]\tvalidation_0-logloss:0.07538\tvalidation_0-mcc:0.95800\n",
      "[300]\tvalidation_0-logloss:0.07540\tvalidation_0-mcc:0.95801\n",
      "[301]\tvalidation_0-logloss:0.07542\tvalidation_0-mcc:0.95802\n",
      "[302]\tvalidation_0-logloss:0.07544\tvalidation_0-mcc:0.95800\n",
      "[303]\tvalidation_0-logloss:0.07547\tvalidation_0-mcc:0.95796\n",
      "[304]\tvalidation_0-logloss:0.07551\tvalidation_0-mcc:0.95801\n",
      "[305]\tvalidation_0-logloss:0.07554\tvalidation_0-mcc:0.95799\n",
      "[306]\tvalidation_0-logloss:0.07558\tvalidation_0-mcc:0.95793\n",
      "[307]\tvalidation_0-logloss:0.07563\tvalidation_0-mcc:0.95790\n",
      "[308]\tvalidation_0-logloss:0.07566\tvalidation_0-mcc:0.95795\n",
      "[309]\tvalidation_0-logloss:0.07573\tvalidation_0-mcc:0.95787\n",
      "[310]\tvalidation_0-logloss:0.07572\tvalidation_0-mcc:0.95796\n",
      "[311]\tvalidation_0-logloss:0.07576\tvalidation_0-mcc:0.95790\n",
      "[312]\tvalidation_0-logloss:0.07583\tvalidation_0-mcc:0.95795\n",
      "[313]\tvalidation_0-logloss:0.07586\tvalidation_0-mcc:0.95793\n",
      "[314]\tvalidation_0-logloss:0.07587\tvalidation_0-mcc:0.95796\n",
      "[315]\tvalidation_0-logloss:0.07587\tvalidation_0-mcc:0.95795\n",
      "[316]\tvalidation_0-logloss:0.07592\tvalidation_0-mcc:0.95793\n",
      "[317]\tvalidation_0-logloss:0.07594\tvalidation_0-mcc:0.95795\n",
      "[318]\tvalidation_0-logloss:0.07599\tvalidation_0-mcc:0.95790\n",
      "[319]\tvalidation_0-logloss:0.07606\tvalidation_0-mcc:0.95789\n",
      "[320]\tvalidation_0-logloss:0.07610\tvalidation_0-mcc:0.95788\n",
      "[321]\tvalidation_0-logloss:0.07610\tvalidation_0-mcc:0.95789\n",
      "[322]\tvalidation_0-logloss:0.07613\tvalidation_0-mcc:0.95788\n",
      "[323]\tvalidation_0-logloss:0.07615\tvalidation_0-mcc:0.95788\n",
      "[324]\tvalidation_0-logloss:0.07622\tvalidation_0-mcc:0.95777\n",
      "[325]\tvalidation_0-logloss:0.07624\tvalidation_0-mcc:0.95774\n",
      "[326]\tvalidation_0-logloss:0.07626\tvalidation_0-mcc:0.95776\n",
      "[327]\tvalidation_0-logloss:0.07627\tvalidation_0-mcc:0.95776\n",
      "[328]\tvalidation_0-logloss:0.07634\tvalidation_0-mcc:0.95769\n",
      "[329]\tvalidation_0-logloss:0.07634\tvalidation_0-mcc:0.95768\n",
      "[330]\tvalidation_0-logloss:0.07636\tvalidation_0-mcc:0.95771\n",
      "[331]\tvalidation_0-logloss:0.07639\tvalidation_0-mcc:0.95775\n",
      "[332]\tvalidation_0-logloss:0.07641\tvalidation_0-mcc:0.95776\n",
      "[333]\tvalidation_0-logloss:0.07640\tvalidation_0-mcc:0.95776\n",
      "[334]\tvalidation_0-logloss:0.07641\tvalidation_0-mcc:0.95777\n",
      "[335]\tvalidation_0-logloss:0.07647\tvalidation_0-mcc:0.95766\n",
      "[336]\tvalidation_0-logloss:0.07647\tvalidation_0-mcc:0.95767\n",
      "[337]\tvalidation_0-logloss:0.07650\tvalidation_0-mcc:0.95771\n",
      "[338]\tvalidation_0-logloss:0.07650\tvalidation_0-mcc:0.95772\n",
      "[339]\tvalidation_0-logloss:0.07655\tvalidation_0-mcc:0.95773\n",
      "[340]\tvalidation_0-logloss:0.07655\tvalidation_0-mcc:0.95776\n",
      "[341]\tvalidation_0-logloss:0.07658\tvalidation_0-mcc:0.95775\n",
      "[342]\tvalidation_0-logloss:0.07662\tvalidation_0-mcc:0.95768\n",
      "[343]\tvalidation_0-logloss:0.07662\tvalidation_0-mcc:0.95773\n",
      "[344]\tvalidation_0-logloss:0.07667\tvalidation_0-mcc:0.95775\n",
      "[345]\tvalidation_0-logloss:0.07671\tvalidation_0-mcc:0.95767\n",
      "[346]\tvalidation_0-logloss:0.07674\tvalidation_0-mcc:0.95765\n",
      "[347]\tvalidation_0-logloss:0.07675\tvalidation_0-mcc:0.95760\n",
      "[348]\tvalidation_0-logloss:0.07679\tvalidation_0-mcc:0.95761\n",
      "[349]\tvalidation_0-logloss:0.07687\tvalidation_0-mcc:0.95753\n",
      "[350]\tvalidation_0-logloss:0.07689\tvalidation_0-mcc:0.95747\n",
      "[351]\tvalidation_0-logloss:0.07692\tvalidation_0-mcc:0.95744\n",
      "[352]\tvalidation_0-logloss:0.07696\tvalidation_0-mcc:0.95751\n",
      "[353]\tvalidation_0-logloss:0.07697\tvalidation_0-mcc:0.95747\n",
      "[354]\tvalidation_0-logloss:0.07704\tvalidation_0-mcc:0.95743\n",
      "[355]\tvalidation_0-logloss:0.07708\tvalidation_0-mcc:0.95742\n",
      "[356]\tvalidation_0-logloss:0.07713\tvalidation_0-mcc:0.95737\n",
      "[357]\tvalidation_0-logloss:0.07717\tvalidation_0-mcc:0.95734\n",
      "[358]\tvalidation_0-logloss:0.07721\tvalidation_0-mcc:0.95739\n",
      "[359]\tvalidation_0-logloss:0.07724\tvalidation_0-mcc:0.95732\n",
      "[360]\tvalidation_0-logloss:0.07726\tvalidation_0-mcc:0.95734\n",
      "[361]\tvalidation_0-logloss:0.07727\tvalidation_0-mcc:0.95732\n",
      "[362]\tvalidation_0-logloss:0.07732\tvalidation_0-mcc:0.95733\n",
      "[363]\tvalidation_0-logloss:0.07732\tvalidation_0-mcc:0.95732\n",
      "[364]\tvalidation_0-logloss:0.07734\tvalidation_0-mcc:0.95730\n",
      "[365]\tvalidation_0-logloss:0.07739\tvalidation_0-mcc:0.95726\n",
      "[366]\tvalidation_0-logloss:0.07744\tvalidation_0-mcc:0.95729\n",
      "[367]\tvalidation_0-logloss:0.07748\tvalidation_0-mcc:0.95732\n",
      "[368]\tvalidation_0-logloss:0.07752\tvalidation_0-mcc:0.95729\n",
      "[369]\tvalidation_0-logloss:0.07751\tvalidation_0-mcc:0.95729\n",
      "[370]\tvalidation_0-logloss:0.07758\tvalidation_0-mcc:0.95734\n",
      "[371]\tvalidation_0-logloss:0.07761\tvalidation_0-mcc:0.95732\n",
      "[372]\tvalidation_0-logloss:0.07761\tvalidation_0-mcc:0.95727\n",
      "[373]\tvalidation_0-logloss:0.07762\tvalidation_0-mcc:0.95734\n",
      "[374]\tvalidation_0-logloss:0.07763\tvalidation_0-mcc:0.95734\n",
      "[375]\tvalidation_0-logloss:0.07766\tvalidation_0-mcc:0.95734\n",
      "[376]\tvalidation_0-logloss:0.07769\tvalidation_0-mcc:0.95738\n",
      "[377]\tvalidation_0-logloss:0.07770\tvalidation_0-mcc:0.95738\n",
      "[378]\tvalidation_0-logloss:0.07773\tvalidation_0-mcc:0.95735\n",
      "[379]\tvalidation_0-logloss:0.07773\tvalidation_0-mcc:0.95733\n",
      "[380]\tvalidation_0-logloss:0.07776\tvalidation_0-mcc:0.95731\n",
      "[381]\tvalidation_0-logloss:0.07778\tvalidation_0-mcc:0.95727\n",
      "[382]\tvalidation_0-logloss:0.07783\tvalidation_0-mcc:0.95722\n",
      "[383]\tvalidation_0-logloss:0.07785\tvalidation_0-mcc:0.95722\n",
      "[384]\tvalidation_0-logloss:0.07786\tvalidation_0-mcc:0.95719\n",
      "[385]\tvalidation_0-logloss:0.07788\tvalidation_0-mcc:0.95722\n",
      "[386]\tvalidation_0-logloss:0.07794\tvalidation_0-mcc:0.95715\n",
      "[387]\tvalidation_0-logloss:0.07798\tvalidation_0-mcc:0.95717\n",
      "[388]\tvalidation_0-logloss:0.07802\tvalidation_0-mcc:0.95714\n",
      "[389]\tvalidation_0-logloss:0.07806\tvalidation_0-mcc:0.95716\n",
      "[390]\tvalidation_0-logloss:0.07807\tvalidation_0-mcc:0.95720\n",
      "[391]\tvalidation_0-logloss:0.07811\tvalidation_0-mcc:0.95718\n",
      "[392]\tvalidation_0-logloss:0.07813\tvalidation_0-mcc:0.95713\n",
      "[393]\tvalidation_0-logloss:0.07811\tvalidation_0-mcc:0.95713\n",
      "[394]\tvalidation_0-logloss:0.07819\tvalidation_0-mcc:0.95705\n",
      "[395]\tvalidation_0-logloss:0.07821\tvalidation_0-mcc:0.95712\n",
      "[396]\tvalidation_0-logloss:0.07823\tvalidation_0-mcc:0.95708\n",
      "[397]\tvalidation_0-logloss:0.07830\tvalidation_0-mcc:0.95702\n",
      "[398]\tvalidation_0-logloss:0.07836\tvalidation_0-mcc:0.95700\n",
      "[399]\tvalidation_0-logloss:0.07840\tvalidation_0-mcc:0.95696\n",
      "[400]\tvalidation_0-logloss:0.07843\tvalidation_0-mcc:0.95700\n",
      "[401]\tvalidation_0-logloss:0.07846\tvalidation_0-mcc:0.95706\n",
      "[402]\tvalidation_0-logloss:0.07853\tvalidation_0-mcc:0.95707\n",
      "[403]\tvalidation_0-logloss:0.07861\tvalidation_0-mcc:0.95707\n",
      "[404]\tvalidation_0-logloss:0.07864\tvalidation_0-mcc:0.95705\n",
      "[405]\tvalidation_0-logloss:0.07865\tvalidation_0-mcc:0.95701\n",
      "[406]\tvalidation_0-logloss:0.07867\tvalidation_0-mcc:0.95699\n",
      "[407]\tvalidation_0-logloss:0.07869\tvalidation_0-mcc:0.95703\n",
      "[408]\tvalidation_0-logloss:0.07871\tvalidation_0-mcc:0.95703\n",
      "[409]\tvalidation_0-logloss:0.07875\tvalidation_0-mcc:0.95699\n",
      "[410]\tvalidation_0-logloss:0.07879\tvalidation_0-mcc:0.95699\n",
      "[411]\tvalidation_0-logloss:0.07883\tvalidation_0-mcc:0.95698\n",
      "[412]\tvalidation_0-logloss:0.07888\tvalidation_0-mcc:0.95698\n",
      "[413]\tvalidation_0-logloss:0.07890\tvalidation_0-mcc:0.95691\n",
      "[414]\tvalidation_0-logloss:0.07893\tvalidation_0-mcc:0.95694\n",
      "[415]\tvalidation_0-logloss:0.07898\tvalidation_0-mcc:0.95691\n",
      "[416]\tvalidation_0-logloss:0.07902\tvalidation_0-mcc:0.95691\n",
      "[417]\tvalidation_0-logloss:0.07905\tvalidation_0-mcc:0.95695\n",
      "[418]\tvalidation_0-logloss:0.07907\tvalidation_0-mcc:0.95695\n",
      "[419]\tvalidation_0-logloss:0.07909\tvalidation_0-mcc:0.95695\n",
      "[420]\tvalidation_0-logloss:0.07912\tvalidation_0-mcc:0.95690\n",
      "[421]\tvalidation_0-logloss:0.07915\tvalidation_0-mcc:0.95689\n",
      "[422]\tvalidation_0-logloss:0.07919\tvalidation_0-mcc:0.95689\n",
      "[423]\tvalidation_0-logloss:0.07921\tvalidation_0-mcc:0.95691\n",
      "[424]\tvalidation_0-logloss:0.07927\tvalidation_0-mcc:0.95685\n",
      "[425]\tvalidation_0-logloss:0.07929\tvalidation_0-mcc:0.95684\n",
      "[426]\tvalidation_0-logloss:0.07930\tvalidation_0-mcc:0.95685\n",
      "[427]\tvalidation_0-logloss:0.07934\tvalidation_0-mcc:0.95691\n",
      "[428]\tvalidation_0-logloss:0.07935\tvalidation_0-mcc:0.95695\n",
      "[429]\tvalidation_0-logloss:0.07935\tvalidation_0-mcc:0.95700\n",
      "[430]\tvalidation_0-logloss:0.07937\tvalidation_0-mcc:0.95698\n",
      "[431]\tvalidation_0-logloss:0.07941\tvalidation_0-mcc:0.95693\n",
      "[432]\tvalidation_0-logloss:0.07947\tvalidation_0-mcc:0.95687\n",
      "[433]\tvalidation_0-logloss:0.07947\tvalidation_0-mcc:0.95690\n",
      "[434]\tvalidation_0-logloss:0.07951\tvalidation_0-mcc:0.95686\n",
      "[435]\tvalidation_0-logloss:0.07953\tvalidation_0-mcc:0.95689\n",
      "[436]\tvalidation_0-logloss:0.07956\tvalidation_0-mcc:0.95690\n",
      "[437]\tvalidation_0-logloss:0.07957\tvalidation_0-mcc:0.95694\n",
      "[438]\tvalidation_0-logloss:0.07960\tvalidation_0-mcc:0.95686\n",
      "[439]\tvalidation_0-logloss:0.07962\tvalidation_0-mcc:0.95685\n",
      "[440]\tvalidation_0-logloss:0.07963\tvalidation_0-mcc:0.95684\n",
      "[441]\tvalidation_0-logloss:0.07969\tvalidation_0-mcc:0.95686\n",
      "[442]\tvalidation_0-logloss:0.07972\tvalidation_0-mcc:0.95684\n",
      "[443]\tvalidation_0-logloss:0.07978\tvalidation_0-mcc:0.95680\n",
      "[444]\tvalidation_0-logloss:0.07984\tvalidation_0-mcc:0.95678\n",
      "[445]\tvalidation_0-logloss:0.07986\tvalidation_0-mcc:0.95679\n",
      "[446]\tvalidation_0-logloss:0.07988\tvalidation_0-mcc:0.95670\n",
      "[447]\tvalidation_0-logloss:0.07994\tvalidation_0-mcc:0.95670\n",
      "[448]\tvalidation_0-logloss:0.07997\tvalidation_0-mcc:0.95678\n",
      "[449]\tvalidation_0-logloss:0.08000\tvalidation_0-mcc:0.95679\n",
      "[450]\tvalidation_0-logloss:0.08000\tvalidation_0-mcc:0.95679\n",
      "[451]\tvalidation_0-logloss:0.08003\tvalidation_0-mcc:0.95682\n",
      "[452]\tvalidation_0-logloss:0.08004\tvalidation_0-mcc:0.95676\n",
      "[453]\tvalidation_0-logloss:0.08005\tvalidation_0-mcc:0.95674\n",
      "[454]\tvalidation_0-logloss:0.08010\tvalidation_0-mcc:0.95672\n",
      "[455]\tvalidation_0-logloss:0.08011\tvalidation_0-mcc:0.95678\n",
      "[456]\tvalidation_0-logloss:0.08012\tvalidation_0-mcc:0.95681\n",
      "[457]\tvalidation_0-logloss:0.08014\tvalidation_0-mcc:0.95677\n",
      "[458]\tvalidation_0-logloss:0.08015\tvalidation_0-mcc:0.95679\n",
      "[459]\tvalidation_0-logloss:0.08015\tvalidation_0-mcc:0.95679\n",
      "[460]\tvalidation_0-logloss:0.08017\tvalidation_0-mcc:0.95683\n",
      "[461]\tvalidation_0-logloss:0.08019\tvalidation_0-mcc:0.95680\n",
      "[462]\tvalidation_0-logloss:0.08023\tvalidation_0-mcc:0.95675\n",
      "[463]\tvalidation_0-logloss:0.08028\tvalidation_0-mcc:0.95679\n",
      "[464]\tvalidation_0-logloss:0.08033\tvalidation_0-mcc:0.95678\n",
      "[465]\tvalidation_0-logloss:0.08035\tvalidation_0-mcc:0.95676\n",
      "[466]\tvalidation_0-logloss:0.08038\tvalidation_0-mcc:0.95675\n",
      "[467]\tvalidation_0-logloss:0.08040\tvalidation_0-mcc:0.95671\n",
      "[468]\tvalidation_0-logloss:0.08044\tvalidation_0-mcc:0.95674\n",
      "[469]\tvalidation_0-logloss:0.08044\tvalidation_0-mcc:0.95671\n",
      "[470]\tvalidation_0-logloss:0.08048\tvalidation_0-mcc:0.95665\n",
      "[471]\tvalidation_0-logloss:0.08052\tvalidation_0-mcc:0.95665\n",
      "[472]\tvalidation_0-logloss:0.08053\tvalidation_0-mcc:0.95669\n",
      "[473]\tvalidation_0-logloss:0.08059\tvalidation_0-mcc:0.95657\n",
      "[474]\tvalidation_0-logloss:0.08063\tvalidation_0-mcc:0.95655\n",
      "[475]\tvalidation_0-logloss:0.08066\tvalidation_0-mcc:0.95657\n",
      "[476]\tvalidation_0-logloss:0.08067\tvalidation_0-mcc:0.95659\n",
      "[477]\tvalidation_0-logloss:0.08071\tvalidation_0-mcc:0.95653\n",
      "[478]\tvalidation_0-logloss:0.08072\tvalidation_0-mcc:0.95651\n",
      "[479]\tvalidation_0-logloss:0.08077\tvalidation_0-mcc:0.95647\n",
      "[480]\tvalidation_0-logloss:0.08077\tvalidation_0-mcc:0.95650\n",
      "[481]\tvalidation_0-logloss:0.08081\tvalidation_0-mcc:0.95644\n",
      "[482]\tvalidation_0-logloss:0.08083\tvalidation_0-mcc:0.95649\n",
      "[483]\tvalidation_0-logloss:0.08085\tvalidation_0-mcc:0.95645\n",
      "[484]\tvalidation_0-logloss:0.08089\tvalidation_0-mcc:0.95654\n",
      "[485]\tvalidation_0-logloss:0.08092\tvalidation_0-mcc:0.95649\n",
      "[486]\tvalidation_0-logloss:0.08095\tvalidation_0-mcc:0.95647\n",
      "[487]\tvalidation_0-logloss:0.08100\tvalidation_0-mcc:0.95643\n",
      "[488]\tvalidation_0-logloss:0.08102\tvalidation_0-mcc:0.95642\n",
      "[489]\tvalidation_0-logloss:0.08103\tvalidation_0-mcc:0.95645\n",
      "[490]\tvalidation_0-logloss:0.08104\tvalidation_0-mcc:0.95647\n",
      "[491]\tvalidation_0-logloss:0.08107\tvalidation_0-mcc:0.95648\n",
      "[492]\tvalidation_0-logloss:0.08113\tvalidation_0-mcc:0.95643\n",
      "[493]\tvalidation_0-logloss:0.08112\tvalidation_0-mcc:0.95644\n",
      "[494]\tvalidation_0-logloss:0.08115\tvalidation_0-mcc:0.95642\n",
      "[495]\tvalidation_0-logloss:0.08115\tvalidation_0-mcc:0.95647\n",
      "[496]\tvalidation_0-logloss:0.08115\tvalidation_0-mcc:0.95647\n",
      "[497]\tvalidation_0-logloss:0.08117\tvalidation_0-mcc:0.95647\n",
      "[498]\tvalidation_0-logloss:0.08120\tvalidation_0-mcc:0.95647\n",
      "[499]\tvalidation_0-logloss:0.08122\tvalidation_0-mcc:0.95644\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(alpha=0.1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.55, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=1e-06, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=14, max_leaves=None,\n",
       "              min_child_weight=7, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=500, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(alpha=0.1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.55, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=1e-06, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=14, max_leaves=None,\n",
       "              min_child_weight=7, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=500, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(alpha=0.1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.55, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=1e-06, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.5, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=14, max_leaves=None,\n",
       "              min_child_weight=7, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=500, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#xgb_model\n",
    "model = XGBClassifier(                    \n",
    "    alpha=0.1,                   \n",
    "    subsample=0.8,     \n",
    "    colsample_bytree=0.55,  \n",
    "    objective='binary:logistic',\n",
    "    max_depth=14,             \n",
    "    min_child_weight=7,         \n",
    "    gamma=1e-6,                \n",
    "    random_state=100,                 \n",
    "    n_estimators=500,\n",
    "    learning_rate=0.5\n",
    "    )\n",
    "\n",
    "#fittting\n",
    "model.fit(\n",
    "    X_train, \n",
    "    y_train, \n",
    "    eval_set=[(X_val, y_val)],\n",
    "    eval_metric=mcc_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "494538f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:19:09.127176Z",
     "iopub.status.busy": "2024-08-10T20:19:09.126734Z",
     "iopub.status.idle": "2024-08-10T20:19:30.513932Z",
     "shell.execute_reply": "2024-08-10T20:19:30.512621Z"
    },
    "papermill": {
     "duration": 21.453658,
     "end_time": "2024-08-10T20:19:30.516499",
     "exception": false,
     "start_time": "2024-08-10T20:19:09.062841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.96%\n"
     ]
    }
   ],
   "source": [
    "#prediction\n",
    "preds = model.predict(X_val)\n",
    "#matthews score\n",
    "matthews = matthews_corrcoef(y_val, preds) \n",
    "\n",
    "print(f\"Accuracy: {matthews:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52d406b2",
   "metadata": {
    "papermill": {
     "duration": 0.060033,
     "end_time": "2024-08-10T20:19:30.636732",
     "exception": false,
     "start_time": "2024-08-10T20:19:30.576699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***prediction on df2***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "189c2a9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:19:30.769178Z",
     "iopub.status.busy": "2024-08-10T20:19:30.768545Z",
     "iopub.status.idle": "2024-08-10T20:20:05.313423Z",
     "shell.execute_reply": "2024-08-10T20:20:05.312091Z"
    },
    "papermill": {
     "duration": 34.680671,
     "end_time": "2024-08-10T20:20:05.378160",
     "exception": false,
     "start_time": "2024-08-10T20:19:30.697489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 0, 1, 0])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_prediction = model.predict(X_test)\n",
    "df2_prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "784e0dac",
   "metadata": {
    "papermill": {
     "duration": 0.060586,
     "end_time": "2024-08-10T20:20:05.500734",
     "exception": false,
     "start_time": "2024-08-10T20:20:05.440148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***submission***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d0ac2b43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:20:05.624248Z",
     "iopub.status.busy": "2024-08-10T20:20:05.623784Z",
     "iopub.status.idle": "2024-08-10T20:20:05.728213Z",
     "shell.execute_reply": "2024-08-10T20:20:05.727005Z"
    },
    "papermill": {
     "duration": 0.169687,
     "end_time": "2024-08-10T20:20:05.730849",
     "exception": false,
     "start_time": "2024-08-10T20:20:05.561162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3116945</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3116946</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3116947</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3116948</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3116949</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3116950</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3116951</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3116952</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3116953</td>\n",
       "      <td>p</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3116954</td>\n",
       "      <td>e</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id class\n",
       "0  3116945     p\n",
       "1  3116946     p\n",
       "2  3116947     p\n",
       "3  3116948     p\n",
       "4  3116949     p\n",
       "5  3116950     p\n",
       "6  3116951     p\n",
       "7  3116952     p\n",
       "8  3116953     p\n",
       "9  3116954     e"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission = subs\n",
    "submission['class'] = lab_enc.inverse_transform(df2_prediction)\n",
    "submission.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8ad48937",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-10T20:20:05.856902Z",
     "iopub.status.busy": "2024-08-10T20:20:05.856456Z",
     "iopub.status.idle": "2024-08-10T20:20:08.763223Z",
     "shell.execute_reply": "2024-08-10T20:20:08.761987Z"
    },
    "papermill": {
     "duration": 2.973482,
     "end_time": "2024-08-10T20:20:08.765989",
     "exception": false,
     "start_time": "2024-08-10T20:20:05.792507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9045607,
     "sourceId": 76727,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 608.220989,
   "end_time": "2024-08-10T20:20:10.056738",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-10T20:10:01.835749",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
